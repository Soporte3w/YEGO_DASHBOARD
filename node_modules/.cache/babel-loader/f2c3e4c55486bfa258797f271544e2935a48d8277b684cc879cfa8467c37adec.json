{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Giomar\\\\Desktop\\\\DashboardWeb\\\\src\\\\context\\\\DashboardContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useMemo } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DashboardContext = /*#__PURE__*/createContext();\nexport const useDashboard = () => {\n  _s();\n  const context = useContext(DashboardContext);\n  if (!context) {\n    throw new Error('useDashboard debe ser usado dentro de un DashboardProvider');\n  }\n  return context;\n};\n\n// Función para obtener la fecha y hora actual formateada\n_s(useDashboard, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst obtenerFechaActual = () => {\n  const ahora = new Date();\n  const año = ahora.getFullYear();\n  const mes = String(ahora.getMonth() + 1).padStart(2, '0');\n  const dia = String(ahora.getDate()).padStart(2, '0');\n  const hora = String(ahora.getHours()).padStart(2, '0');\n  const minutos = String(ahora.getMinutes()).padStart(2, '0');\n  return `${año}-${mes}-${dia} ${hora}:${minutos}`;\n};\nexport const DashboardProvider = ({\n  children\n}) => {\n  _s2();\n  // Usar useMemo para generar los dashboards con fecha actual cada vez que se recarga\n  const dashboards = useMemo(() => [{\n    id: 'yego_lima',\n    nombre: 'Yego Lima',\n    descripcion: 'Dashboard de métricas y análisis para la operación de Yego en Lima',\n    url: 'https://app.powerbi.com/view?r=eyJrIjoiMmM4ZDgxNTAtOGVhNS00ZTI2LTkxZjQtMDI3ODQ4ZTdjMjA3IiwidCI6Ijk4MjAxZmVmLWQ5ZjYtNGU2OC04NGY1LWMyNzA1MDc0ZTM0MiIsImMiOjR9',\n    color: '#dc2626',\n    icono: '🏙️',\n    categoria: 'Operaciones',\n    ultimaActualizacion: obtenerFechaActual()\n  }, {\n    id: 'yego_barranquilla',\n    nombre: 'Yego Barranquilla',\n    descripcion: 'Métricas y KPIs de la operación de Yego en Barranquilla',\n    url: 'https://app.powerbi.com/view?r=eyJrIjoiY2Q3YTYwZWItNGMzMy00OWFiLTlkMTAtNWFlYWJmMjQyNGM5IiwidCI6Ijk4MjAxZmVmLWQ5ZjYtNGU2OC04NGY1LWMyNzA1MDc0ZTM0MiIsImMiOjR9',\n    color: '#ef4444',\n    icono: '🌊',\n    categoria: 'Operaciones',\n    ultimaActualizacion: obtenerFechaActual()\n  }, {\n    id: 'yego_cucuta',\n    nombre: 'Yego Cúcuta',\n    descripcion: 'Dashboard completo de análisis para Cúcuta',\n    url: 'https://app.powerbi.com/view?r=eyJrIjoiMTBlN2U3ZmUtOTNlNS00ZDRkLWE5ZTItNWI3OWRiNWJjMmY2IiwidCI6Ijk4MjAxZmVmLWQ5ZjYtNGU2OC04NGY1LWMyNzA1MDc0ZTM0MiIsImMiOjR9',\n    color: '#7f1d1d',\n    icono: '🏢',\n    categoria: 'Operaciones',\n    ultimaActualizacion: obtenerFechaActual()\n  }, {\n    id: 'yego_bogotá',\n    nombre: 'Yego Bogota',\n    descripcion: 'Análisis de rendimiento y métricas de Bogota',\n    url: 'https://app.powerbi.com/view?r=eyJrIjoiOTE2Yjg3M2MtZmI3Ny00MmI4LTlmZDAtMDQ1ZTMyOGVlYjVmIiwidCI6Ijk4MjAxZmVmLWQ5ZjYtNGU2OC04NGY1LWMyNzA1MDc0ZTM0MiIsImMiOjR9',\n    color: '#b91c1c',\n    icono: '🌸',\n    categoria: 'Operaciones',\n    ultimaActualizacion: obtenerFechaActual()\n  }, {\n    id: 'yego_bucaramanga',\n    nombre: 'Yego Bucaramanga',\n    descripcion: 'Dashboard de métricas para la operación en Bucaramanga',\n    url: 'https://app.powerbi.com/view?r=eyJrIjoiMmM4ZDgxNTAtOGVhNS00ZTI2LTkxZjQtMDI3ODQ4ZTdjMjA3IiwidCI6Ijk4MjAxZmVmLWQ5ZjYtNGU2OC04NGY1LWMyNzA1MDc0ZTM0MiIsImMiOjR9',\n    color: '#dc2626',\n    icono: '🌴',\n    categoria: 'Operaciones',\n    ultimaActualizacion: obtenerFechaActual()\n  }], []); // El array vacío como dependencia hace que se recalcule en cada render\n\n  const [dashboardActivo, setDashboardActivo] = useState(null);\n  const obtenerDashboard = id => {\n    return dashboards.find(dashboard => dashboard.id === id);\n  };\n  const obtenerDashboardsPorCategoria = categoria => {\n    return dashboards.filter(dashboard => dashboard.categoria === categoria);\n  };\n  const valor = {\n    dashboards,\n    dashboardActivo,\n    setDashboardActivo,\n    obtenerDashboard,\n    obtenerDashboardsPorCategoria\n  };\n  return /*#__PURE__*/_jsxDEV(DashboardContext.Provider, {\n    value: valor,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s2(DashboardProvider, \"rz4toUC96N0F5oC1bvwEAXufYMY=\");\n_c = DashboardProvider;\nvar _c;\n$RefreshReg$(_c, \"DashboardProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useMemo","jsxDEV","_jsxDEV","DashboardContext","useDashboard","_s","context","Error","obtenerFechaActual","ahora","Date","año","getFullYear","mes","String","getMonth","padStart","dia","getDate","hora","getHours","minutos","getMinutes","DashboardProvider","children","_s2","dashboards","id","nombre","descripcion","url","color","icono","categoria","ultimaActualizacion","dashboardActivo","setDashboardActivo","obtenerDashboard","find","dashboard","obtenerDashboardsPorCategoria","filter","valor","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Giomar/Desktop/DashboardWeb/src/context/DashboardContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useMemo } from 'react';\r\n\r\nconst DashboardContext = createContext();\r\n\r\nexport const useDashboard = () => {\r\n  const context = useContext(DashboardContext);\r\n  if (!context) {\r\n    throw new Error('useDashboard debe ser usado dentro de un DashboardProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n// Función para obtener la fecha y hora actual formateada\r\nconst obtenerFechaActual = () => {\r\n  const ahora = new Date();\r\n  const año = ahora.getFullYear();\r\n  const mes = String(ahora.getMonth() + 1).padStart(2, '0');\r\n  const dia = String(ahora.getDate()).padStart(2, '0');\r\n  const hora = String(ahora.getHours()).padStart(2, '0');\r\n  const minutos = String(ahora.getMinutes()).padStart(2, '0');\r\n  \r\n  return `${año}-${mes}-${dia} ${hora}:${minutos}`;\r\n};\r\n\r\nexport const DashboardProvider = ({ children }) => {\r\n  // Usar useMemo para generar los dashboards con fecha actual cada vez que se recarga\r\n  const dashboards = useMemo(() => [\r\n    {\r\n      id: 'yego_lima',\r\n      nombre: 'Yego Lima',\r\n      descripcion: 'Dashboard de métricas y análisis para la operación de Yego en Lima',\r\n      url: 'https://app.powerbi.com/view?r=eyJrIjoiMmM4ZDgxNTAtOGVhNS00ZTI2LTkxZjQtMDI3ODQ4ZTdjMjA3IiwidCI6Ijk4MjAxZmVmLWQ5ZjYtNGU2OC04NGY1LWMyNzA1MDc0ZTM0MiIsImMiOjR9',\r\n      color: '#dc2626',\r\n      icono: '🏙️',\r\n      categoria: 'Operaciones',\r\n      ultimaActualizacion: obtenerFechaActual()\r\n    },\r\n    {\r\n      id: 'yego_barranquilla',\r\n      nombre: 'Yego Barranquilla',\r\n      descripcion: 'Métricas y KPIs de la operación de Yego en Barranquilla',\r\n      url: 'https://app.powerbi.com/view?r=eyJrIjoiY2Q3YTYwZWItNGMzMy00OWFiLTlkMTAtNWFlYWJmMjQyNGM5IiwidCI6Ijk4MjAxZmVmLWQ5ZjYtNGU2OC04NGY1LWMyNzA1MDc0ZTM0MiIsImMiOjR9',\r\n      color: '#ef4444',\r\n      icono: '🌊',\r\n      categoria: 'Operaciones',\r\n      ultimaActualizacion: obtenerFechaActual()\r\n    },\r\n    {\r\n      id: 'yego_cucuta',\r\n      nombre: 'Yego Cúcuta',\r\n      descripcion: 'Dashboard completo de análisis para Cúcuta',\r\n      url: 'https://app.powerbi.com/view?r=eyJrIjoiMTBlN2U3ZmUtOTNlNS00ZDRkLWE5ZTItNWI3OWRiNWJjMmY2IiwidCI6Ijk4MjAxZmVmLWQ5ZjYtNGU2OC04NGY1LWMyNzA1MDc0ZTM0MiIsImMiOjR9',\r\n      color: '#7f1d1d',\r\n      icono: '🏢',\r\n      categoria: 'Operaciones',\r\n      ultimaActualizacion: obtenerFechaActual()\r\n    },\r\n    {\r\n      id: 'yego_bogotá',\r\n      nombre: 'Yego Bogota',\r\n      descripcion: 'Análisis de rendimiento y métricas de Bogota',\r\n      url: 'https://app.powerbi.com/view?r=eyJrIjoiOTE2Yjg3M2MtZmI3Ny00MmI4LTlmZDAtMDQ1ZTMyOGVlYjVmIiwidCI6Ijk4MjAxZmVmLWQ5ZjYtNGU2OC04NGY1LWMyNzA1MDc0ZTM0MiIsImMiOjR9',\r\n      color: '#b91c1c',\r\n      icono: '🌸',\r\n      categoria: 'Operaciones',\r\n      ultimaActualizacion: obtenerFechaActual()\r\n    },\r\n    {\r\n      id: 'yego_bucaramanga',\r\n      nombre: 'Yego Bucaramanga',\r\n      descripcion: 'Dashboard de métricas para la operación en Bucaramanga',\r\n      url: 'https://app.powerbi.com/view?r=eyJrIjoiMmM4ZDgxNTAtOGVhNS00ZTI2LTkxZjQtMDI3ODQ4ZTdjMjA3IiwidCI6Ijk4MjAxZmVmLWQ5ZjYtNGU2OC04NGY1LWMyNzA1MDc0ZTM0MiIsImMiOjR9',\r\n      color: '#dc2626',\r\n      icono: '🌴',\r\n      categoria: 'Operaciones',\r\n      ultimaActualizacion: obtenerFechaActual()\r\n    }\r\n  ], []); // El array vacío como dependencia hace que se recalcule en cada render\r\n\r\n  const [dashboardActivo, setDashboardActivo] = useState(null);\r\n\r\n  const obtenerDashboard = (id) => {\r\n    return dashboards.find(dashboard => dashboard.id === id);\r\n  };\r\n\r\n  const obtenerDashboardsPorCategoria = (categoria) => {\r\n    return dashboards.filter(dashboard => dashboard.categoria === categoria);\r\n  };\r\n\r\n  const valor = {\r\n    dashboards,\r\n    dashboardActivo,\r\n    setDashboardActivo,\r\n    obtenerDashboard,\r\n    obtenerDashboardsPorCategoria\r\n  };\r\n\r\n  return (\r\n    <DashboardContext.Provider value={valor}>\r\n      {children}\r\n    </DashboardContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}